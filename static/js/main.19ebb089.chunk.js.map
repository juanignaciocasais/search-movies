{"version":3,"sources":["components/Title.js","components/SearchForm.js","components/Movie.js","components/MoviesList.js","pages/Home.js","components/ButtonBackToHome.js","pages/Detail.js","pages/NotFound.js","App.js","serviceWorker.js","index.js"],"names":["Title","children","className","SearchForm","state","inputMovie","_handleChange","e","setState","target","value","_handleSubmit","preventDefault","fetch","then","res","json","results","Search","totalResults","console","log","props","onResults","onSubmit","this","onChange","type","placeholder","Component","Movie","id","title","year","poster","to","process","alt","src","MoviesList","movies","map","movie","key","imdbID","Year","Poster","Home","usedSearch","_handleResults","length","_renderResults","ButtonBackToHome","Detail","window","history","back","movieId","match","params","_fetchMovie","Actors","Metascore","Plot","NotFound","App","exact","path","component","Boolean","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.19ebb089.chunk.js","sourcesContent":["import React from 'react'\n\nexport const Title = ({children}) => (\n    <h1 className=\"title\">{children}</h1>\n)\n\n","import React, {Component} from \"react\";\n\nconst API_KEY = '6140f1ea'\n\nexport class SearchForm extends Component {\n    state = {\n        inputMovie:''\n    }\n\n    _handleChange = (e) => {\n        this.setState({ inputMovie: e.target.value })\n    }\n\n    _handleSubmit = (e) => {\n        e.preventDefault()\n        const { inputMovie } = this.state\n        fetch(`https://www.omdbapi.com/?apikey=${API_KEY}&s=${ inputMovie }`)\n        .then(res => res.json())\n        .then(results => {\n            const { Search = [], totalResults = \"0\" } = results\n            console.log({Search, totalResults})\n            this.props.onResults(Search)\n        })\n    }\n\n    render(){\n        return(\n            <form onSubmit={this._handleSubmit}>\n                <div className=\"field has-addons\">\n                    <div className=\"control\">\n                        <input \n                            className=\"input\" \n                            onChange={this._handleChange}\n                            type=\"text\" \n                            placeholder=\"Movie to search...\" \n                        />\n                    </div>\n                    <div className=\"control\">\n                        <button className=\"button is-info\">\n                            Search\n                        </button>\n                    </div>\n                </div>\n            </form>\n        )\n    }\n}","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport {Link} from 'react-router-dom'\n\nexport class Movie extends Component {\n    static propTypes = {\n        id: PropTypes.string,\n        title: PropTypes.string,\n        year: PropTypes.string,\n        poster: PropTypes.string\n    }\n    \n    render(){\n        const { id, title, year, poster } = this.props\n\n        return (\n            <Link to={`${process.env.PUBLIC_URL}/detail/${id}`} className=\"card\">\n                <div className=\"card-image\">\n                    <figure className=\"image\">\n                    <img\n                        alt={title}\n                        src={poster}\n                    />\n                    </figure>\n                </div>\n                <div className=\"card-content\">\n                    <div className=\"media\">\n                        <div className=\"media-content\">\n                            <p className=\"title is-4\">{title}</p>\n                            <p className=\"subtitle is-6\">{year}</p>\n                        </div>\n                    </div>\n                </div>\n            </Link>\n        )\n    }\n}\n\n","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\n\nimport {Movie} from './Movie';\n\nexport class MoviesList extends Component {\n    static propTypes = {\n        movies: PropTypes.array\n    }\n\n    render () {\n        const { movies } = this.props\n        return (\n            <div className='MoviesList'>\n                {\n                    movies.map(movie => {\n                        return (\n                            <div key = {movie.imdbID} className='MoviesList-item'>\n                                <Movie \n                                    id = {movie.imdbID}\n                                    title = {movie.Title}\n                                    year = {movie.Year}\n                                    poster = {movie.Poster}\n                                />\n                            </div>\n                        )\n                    })\n                }    \n            </div>\n        )\n    }\n}","import React, { Component } from 'react'\n\nimport {Title} from '../components/Title'\nimport {SearchForm} from '../components/SearchForm'\nimport {MoviesList} from '../components/MoviesList'\n\nexport class Home extends Component {\n    state = { usedSearch: false, results: [] }\n    \n    _handleResults = (results) => {\n        this.setState({ results, usedSearch: true})\n    }\n\n    _renderResults () {\n        return this.state.results.length === 0 \n        ? <p>Sorry! Results not found... </p>\n        : <MoviesList movies = {this.state.results} />\n    }\n\n    render () {\n        return (\n            <div>\n                <Title>Search Movies</Title>\n                <div className='SearchForm-wrapper'>\n                <SearchForm onResults={this._handleResults}/>\n                </div>\n                {this.state.usedSearch \n                    ? this._renderResults()\n                    : <small>Use the form to search the movie</small>\n                }\n            </div>\n        )\n    }\n} ","import React from 'react'\nimport {Link} from 'react-router-dom'\n\nexport const ButtonBackToHome = () => (\n    <Link className='button is-info'\n        to={process.env.PUBLIC_URL + '/'}>\n            Return\n        </Link>\n)","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport {ButtonBackToHome} from '../components/ButtonBackToHome'\n\nconst API_KEY = '6140f1ea'\n\nexport class Detail extends Component {\n    static propTypes = {\n        match: PropTypes.shape({\n            params: PropTypes.object,\n            isExact: PropTypes.bool,\n            path: PropTypes.string,\n            url: PropTypes.string\n        })\n    }\n\n    state = { movie: {} }\n\n    _fetchMovie ({ id }) {\n        fetch(`http://www.omdbapi.com/?apikey=${API_KEY}&i=${id}`)\n        .then(res => res.json())\n        .then(movie => {\n            console.log({ movie })\n            this.setState({ movie })\n        })\n    }\n\n    _goBack() {\n        window.history.back()\n    }\n\n    componentDidMount () {\n        console.log(this.props)\n        const { movieId } = this.props.match.params\n        this._fetchMovie({ id: movieId })\n    }\n    \n    render() {\n        const { Title, Poster, Actors, Metascore, Plot } = this.state.movie\n        return (\n            <div>\n            <ButtonBackToHome />\n            <h1>{Title}</h1>\n            <img src={Poster} alt={Title}/>\n            <h3>{Actors}</h3>\n            <span>{Metascore}</span>\n            <p>{Plot}</p>\n            </div>\n        )\n    }\n}","import React from 'react'\nimport {ButtonBackToHome} from '../components/ButtonBackToHome'\n\nimport '../App.css'\n\nexport const NotFound = () => (\n    <div>\n        <h1 className=\"title\">404 Error!</h1>\n        <h2 className=\"subtitle\">Page dosn't exist!</h2>\n        <ButtonBackToHome />\n    </div>\n    \n)\n\n","import React, { Component } from 'react';\nimport { Switch, Route } from 'react-router-dom';\n    \nimport {Home} from './pages/Home'\nimport {Detail} from './pages/Detail'\nimport {NotFound} from './pages/NotFound'\nimport './App.css';\nimport 'bulma/css/bulma.css';\n\n\nclass App extends Component {\n     \n\n    render (){     \n        return (\n            <div className=\"App\">\n                <Switch>\n                    <Route exact path={process.env.PUBLIC_URL + '/'} component={Home} />\n                    <Route path={process.env.PUBLIC_URL + '/detail/:movieId'} component={Detail} />\n                    <Route component={NotFound} />\n                </Switch>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { BrowserRouter } from 'react-router-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}